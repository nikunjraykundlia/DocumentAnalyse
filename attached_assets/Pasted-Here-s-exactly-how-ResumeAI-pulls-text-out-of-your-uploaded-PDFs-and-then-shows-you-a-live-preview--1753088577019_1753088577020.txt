Here’s exactly how ResumeAI pulls text out of your uploaded PDFs and then shows you a live “preview” of that text in the browser:

1. Detecting the file type and routing to the PDF extractor
When you upload a file, the Flask route calls:

def analyze_resume(file_path):
    text = extract_text_from_file(file_path)
    return text

Inside extract_text_from_file, it looks at the file extension (.pdf vs. image) and dispatches to:

if ext == '.pdf':
    return extract_text_from_pdf(file_path)




2. Using pdfplumber to read and extract page text
The core worker for PDFs is in extract_text_from_pdf:

def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            extracted_text = page.extract_text()
            if extracted_text:
                text += extracted_text + "\n"
    return text.strip()

pdfplumber.open loads the PDF into memory.

.pages gives you a list of page objects.

page.extract_text() uses pdfplumber’s underlying PDFMiner logic to pull out all the Unicode text from that page.

All pages’ text get concatenated (with a newline between pages) and returned as one big string. 



3. Returning the extracted text to the front end
In the API endpoint (e.g. /api/upload or /upload), after calling analyze_resume(...), the server packages up that full text into a JSON response:

{
  "success": true,
  "text": "<all of your resume text here>",
  ... other fields ...
}

The front-end JavaScript then does:

fetch('/api/upload', { /* … */ })
  .then(res => res.json())
  .then(data => {
    document.getElementById('resumeText').textContent = data.text;
    // …
  });

This immediately injects the raw, extracted text into the <pre id="resumeText"> element on the page so you see a live preview of exactly what was pulled from your PDF. 


4. Why it “just works”

Pdfplumber is very good at handling most text-based PDFs (multi-column, line breaks, etc.).

Since the app doesn’t rely on OCR for PDFs, it avoids character-recognition errors and is extremely fast.

The JavaScript doesn’t truncate or massage the text—it simply dumps whatever the Python extractor returned straight into the browser, giving you a faithful “preview” of your resume’s contents.





---

So in a nutshell:

1. Flask sees a .pdf upload and calls extract_text_from_pdf.


2. Pdfplumber opens the PDF, loops pages, and calls page.extract_text().


3. All extracted text is concatenated into one big string.


4. That string is returned as JSON and immediately pasted into your browser’s preview pane.



That’s why you get a near-perfect live preview of your resume text—no OCR shenanigans, just direct PDF text extraction.

